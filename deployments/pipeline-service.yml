Parameters:
  GitHubRepo:
    Type: String
  GitHubBranch:
    Type: String
  GitHubToken:
    Type: String
    NoEcho: true
  GitHubUser:
    Type: String
  EnvironmentName:
    Type: String
    Default: production
  DeploymentType:
    Type: String
    Default: fargate
    AllowedValues: [ecs, fargate]
  ServiceName:
    Type: String
    Description: The name of the service
    AllowedValues: [server, cache, database]
  TriggerMessagePattern:
    Type: String
    Description: A commit message that triggers the build process
    Default: \[BuildAll\]
  ArtifactBucket:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /microservices/artifact_bucket
  CodePipelineServiceRoleArn:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /microservices/codepipeline_service_role_arn
  # CloudFormationDeployRole:
  #   Type: AWS::SSM::Parameter::Value<String>
  #   Default: /microservices/cloudformation_deploy_role

Resources:

  #-----------------------------------------------------------------------------#
  # ECR
  #-----------------------------------------------------------------------------#
  Repository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub ${EnvironmentName}/${ServiceName}

  #-----------------------------------------------------------------------------#
  # CodeBuild Project
  #-----------------------------------------------------------------------------#
  # SourceCredentials:
  #   Type: AWS::CodeBuild::SourceCredential
  #   Properties:
  #     Token: !Ref GitHubToken
  #     ServerType: GITHUB
  #     AuthType: PERSONAL_ACCESS_TOKEN


  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    # DependsOn: SourceCredentials
    Properties:
      Artifacts:
        Type: NO_ARTIFACTS
      Source:
        Type: GITHUB
        Location: !Sub https://github.com/${GitHubUser}/${GitHubRepo}.git
        BuildSpec: deployments/buildspec/service.yml
      SourceVersion: !Ref GitHubBranch
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:5.0
        Type: LINUX_CONTAINER
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: AWS_ACCOUNT_ID
            Value: !Sub ${AWS::AccountId}
          - Name: SERVICE
            Value: !Ref ServiceName
          - Name: REPO_URI
            Value: !Sub ${Repository.RepositoryUri}
          - Name: ARTIFACT_BUCKET
            Value: !Ref ArtifactBucket
      Triggers:
        Webhook: true
        FilterGroups:
        - - Type: EVENT
            Pattern: PUSH
            ExcludeMatchedPattern: false
          - Type: HEAD_REF
            Pattern: !Sub ^refs/heads/${GitHubBranch}$
            ExcludeMatchedPattern: false
          - Type: COMMIT_MESSAGE
            Pattern: !Ref TriggerMessagePattern
            ExcludeMatchedPattern: false
        # - - Type: EVENT
        #     Pattern: PUSH
        #     ExcludeMatchedPattern: false
        #   - Type: HEAD_REF
        #     Pattern: !Sub ^refs/heads/${GitHubBranch}$
        #     ExcludeMatchedPattern: false
        #   - Type: FILE_PATH
        #     Pattern: ^(cmd/server/|internal/|web/|server.Dockerfile)
        #     ExcludeMatchedPattern: false
      ServiceRole: !Ref CodeBuildServiceRole
      TimeoutInMinutes: 10

  #-----------------------------------------------------------------------------#
  # CodePipeline
  #-----------------------------------------------------------------------------#
  CloudWatchEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        detail:
          eventSource: [s3.amazonaws.com]
          eventName: [PutObject]
          requestParameters:
            bucketName: [!Ref ArtifactBucket]
            key:
              - !Sub imagedefinitions/${ServiceName}.zip
        detail-type: [AWS API Call via CloudTrail]
        source: [aws.s3]
      Targets:
        - Arn: !Sub arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${Pipeline}
          RoleArn: !GetAtt CloudWatchEventRole.Arn
          Id: server-pipeline

  PipelineWebhook: 
    Type: AWS::CodePipeline::Webhook
    Properties:
      AuthenticationConfiguration:
        SecretToken: !Ref GitHubToken
      Filters:
        - JsonPath: "$.ref"
          MatchEquals: refs/heads/{Branch}
      Authentication: GITHUB_HMAC
      TargetPipeline: !Ref Pipeline
      TargetAction: Code
      TargetPipelineVersion: !GetAtt Pipeline.Version
      RegisterWithThirdParty: false # only manual action

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !Ref CodePipelineServiceRoleArn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket
      Stages:

        #-----------------------------------------------------------------------------#
        # Source
        #-----------------------------------------------------------------------------#
        - Name: Source
          Actions:

            # - Name: Image
            #   Namespace: ImageVariables
            #   ActionTypeId:
            #     Category: Source
            #     Owner: AWS
            #     Version: 1
            #     Provider: ECR
            #   Configuration:
            #     RepositoryName: !Ref Repository
            #     ImageTag: latest
            #   OutputArtifacts:
            #     - Name: Image
            #   RunOrder: 1

            - Name: Image
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: S3
              Configuration:
                S3Bucket: !Ref ArtifactBucket
                S3ObjectKey: !Sub imagedefinitions/${ServiceName}.zip
                PollForSourceChanges: false
              OutputArtifacts:
                - Name: Image
              RunOrder: 1

            - Name: Code
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              Configuration:
                Owner: !Ref GitHubUser
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubToken
                PollForSourceChanges: false
              OutputArtifacts:
                - Name: Code
              RunOrder: 1

        #-----------------------------------------------------------------------------#
        # Deploy
        #-----------------------------------------------------------------------------#
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: ECS
              Configuration:
                ClusterName:
                  Fn::ImportValue: !Sub ${EnvironmentName}:ClusterName
                ServiceName: !Ref ServiceName
                # Needs imagedefinitions.json but ECR produces imageDetail.json.
                # Need a build stage to build images or transform imageDetail.json
                # as described here: https://stackoverflow.com/a/57015190
                # Or use blue/green deployment
                FileName: imagedefinitions.json
              InputArtifacts:
                - Name: Image

        # - Name: Deploy
        #   Actions:
        #     - Name: Deploy
        #       ActionTypeId:
        #         Category: Deploy
        #         Owner: AWS
        #         Version: 1
        #         Provider: CloudFormation
        #       Configuration:
        #         ActionMode: CREATE_UPDATE
        #         RoleArn: !Ref CloudFormationDeployRole
        #         StackName: !Sub ${EnvironmentName}-ServerService
        #         TemplatePath: !Sub Code::deployments/services-${DeploymentType}/server.yml
        #         Capabilities: CAPABILITY_IAM
        #         ParameterOverrides: !Sub |
        #           {
        #             "EnvironmentName": "${EnvironmentName}",
        #             "ImageUrl": "${Repository.RepositoryUri}@#{ImageVariables.ImageDigest}"
        #           }
        #       InputArtifacts:
        #         - Name: Image
        #         - Name: Code

  #-----------------------------------------------------------------------------#
  # Role for CodeBuild service
  #-----------------------------------------------------------------------------#
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ecr:GetAuthorizationToken
              - Resource: !Sub arn:aws:s3:::${ArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetObjectVersion
              - Resource: "*" # !GetAtt Repository.Arn
                Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                  - ecr:PutImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload

  #-----------------------------------------------------------------------------#
  # Role for CloudWatch service
  #-----------------------------------------------------------------------------#
  CloudWatchEventRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: cwe-pipeline-execution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: codepipeline:StartPipelineExecution
                Resource: !Sub arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${Pipeline}

Outputs:
  PipelineUrl:
    Value: !Sub https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${Pipeline}
