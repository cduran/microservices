Parameters:
  GitHubRepo:
    Type: String
  GitHubBranch:
    Type: String
  GitHubToken:
    Type: String
    NoEcho: true
  GitHubUser:
    Type: String
  EnvironmentName:
    Type: String
    Default: production
  DeploymentType:
    Type: String
    Default: fargate
    AllowedValues: [ecs, fargate]
  ServiceName:
    Type: String
    Description: The name of the service
    AllowedValues: [server, cache, database]
  TriggerMessagePattern:
    Type: String
    Description: A commit message that triggers the build process
    Default: \[BuildAll\]

Resources:

  #-----------------------------------------------------------------------------#
  # ECR
  #-----------------------------------------------------------------------------#
  ServerRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub ${EnvironmentName}/${ServiceName}

  #-----------------------------------------------------------------------------#
  # Artifact Bucket
  #-----------------------------------------------------------------------------#
  ArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub microservices-services-${AWS::AccountId}

  #-----------------------------------------------------------------------------#
  # CodeBuild Project
  #-----------------------------------------------------------------------------#
  SourceCreds:
    Type: AWS::CodeBuild::SourceCredential
    Properties:
      Token: !Ref GitHubToken
      ServerType: GITHUB
      AuthType: PERSONAL_ACCESS_TOKEN

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    DependsOn: SourceCreds
    Properties:
      Artifacts:
        Type: NO_ARTIFACTS
      Source:
        Type: GITHUB
        Location: !Sub https://github.com/${GitHubUser}/${GitHubRepo}.git
        BuildSpec: deployments/buildspec/service.yml
      SourceVersion: !Ref GitHubBranch
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:5.0
        Type: LINUX_CONTAINER
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: AWS_ACCOUNT_ID
            Value: !Sub ${AWS::AccountId}
          - Name: SERVICE
            Value: server
          - Name: REPO_URI
            Value: !Sub ${ServerRepository.RepositoryUri}
      Triggers:
        Webhook: true
        FilterGroups:
        - - Type: EVENT
            Pattern: PUSH
            ExcludeMatchedPattern: false
          - Type: HEAD_REF
            Pattern: !Sub ^refs/heads/${GitHubBranch}$
            ExcludeMatchedPattern: false
          - Type: COMMIT_MESSAGE
            Pattern: !Ref TriggerMessagePattern
            ExcludeMatchedPattern: false
        # - - Type: EVENT
        #     Pattern: PUSH
        #     ExcludeMatchedPattern: false
        #   - Type: HEAD_REF
        #     Pattern: !Sub ^refs/heads/${GitHubBranch}$
        #     ExcludeMatchedPattern: false
        #   - Type: FILE_PATH
        #     Pattern: ^(cmd/server/|internal/|web/|server.Dockerfile)
        #     ExcludeMatchedPattern: false
      ServiceRole: !Ref CodeBuildServiceRole
      TimeoutInMinutes: 10

  #-----------------------------------------------------------------------------#
  # CodePipeline
  #-----------------------------------------------------------------------------#
  CloudWatchEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        detail:
          action-type: [PUSH]
          image-tag: [latest]
          repository-name: [!Ref ServerRepository]
          result: [SUCCESS]
        detail-type: [ECR Image Action]
        source: [aws.ecr]
      Targets:
        - Arn: !Sub arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${Pipeline}
          RoleArn: !GetAtt CloudWatchEventRole.Arn
          Id: server-pipeline

  PipelineWebhook: 
    Type: AWS::CodePipeline::Webhook
    Properties:
      AuthenticationConfiguration:
        SecretToken: !Ref GitHubToken
      Filters:
        - JsonPath: "$.ref"
          MatchEquals: refs/heads/{Branch}
      Authentication: GITHUB_HMAC
      TargetPipeline: !Ref Pipeline
      TargetAction: Code
      TargetPipelineVersion: !GetAtt Pipeline.Version
      RegisterWithThirdParty: false # only manual action

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket
      Stages:

        #-----------------------------------------------------------------------------#
        # Source
        #-----------------------------------------------------------------------------#
        - Name: Source
          Actions:
            - Name: Source
              Namespace: SourceVariables
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: ECR
              Configuration:
                RepositoryName: !Ref ServerRepository
                ImageTag: latest
              OutputArtifacts:
                - Name: SourceImage
              RunOrder: 1

            - Name: Code
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              Configuration:
                Owner: !Ref GitHubUser
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubToken
                PollForSourceChanges: false
              OutputArtifacts:
                - Name: SourceCode
              RunOrder: 1

        #-----------------------------------------------------------------------------#
        # Deploy
        #-----------------------------------------------------------------------------#
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              Configuration:
                ActionMode: CREATE_UPDATE
                RoleArn: !GetAtt CloudFormationDeployRole.Arn
                StackName: !Sub ${EnvironmentName}-ServerService
                TemplatePath: !Sub SourceCode::deployments/services-${DeploymentType}/server.yml
                Capabilities: CAPABILITY_IAM
                ParameterOverrides: !Sub |
                  {
                    "EnvironmentName": "${EnvironmentName}",
                    "ImageUrl": "${ServerRepository.RepositoryUri}@#{SourceVariables.ImageDigest}"
                  }
              InputArtifacts:
                - Name: SourceImage
                - Name: SourceCode

  #-----------------------------------------------------------------------------#
  # Role for CodePipeline service
  #-----------------------------------------------------------------------------#
  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              # Allow codepipeline to put artifacts in the S3 bucket
              # as well as get artifacts back out of it.
              - Resource:
                  - !Sub arn:aws:s3:::${ArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
              # Allow codepipeline to build code builds
              - Resource: "*"
                Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - iam:PassRole
              # Allow codepipeline to deploy cloudformation stacks
              - Effect: Allow
                Action:
                  - cloudformation:CreateChangeSet
                  - cloudformation:CreateStack
                  - cloudformation:CreateUploadBucket
                  - cloudformation:DeleteStack
                  - cloudformation:Describe*
                  - cloudformation:List*
                  - cloudformation:UpdateStack
                  - cloudformation:ValidateTemplate
                  - cloudformation:ExecuteChangeSet
                Resource: "*"
              # Allow codepipeline to get images from ECR
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:GetRepositoryPolicy
                  - ecr:DescribeRepositories
                  - ecr:ListImages
                  - ecr:DescribeImages
                  - ecr:BatchGetImage
                  - ecr:GetLifecyclePolicy
                  - ecr:GetLifecyclePolicyPreview
                  - ecr:ListTagsForResource
                  - ecr:DescribeImageScanFindings
                Resource: "*"

  # This role is passed by CodePipeline to CloudFormation to use
  # when setting up resources in the pipeline
  CloudFormationDeployRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: deploy-stack
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "iam:*"
                  - "ec2:*"
                  - "ecs:*"
                  - "elasticloadbalancing:*"
                  - "autoscaling:*"
                  - "elasticache:*"
                  - "logs:*"
                  - "application-autoscaling:*"
                  - "cloudwatch:*"
                  - "route53:*"
                  - "rds:*"
                  - "mq:*"
                  # - "secretsmanager:*"
                  - "ssm:*"
                Resource: "*"

  #-----------------------------------------------------------------------------#
  # Role for CodeBuild service
  #-----------------------------------------------------------------------------#
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ecr:GetAuthorizationToken
              - Resource: !Sub arn:aws:s3:::${ArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetObjectVersion
              - Resource: !GetAtt ServerRepository.Arn
                Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                  - ecr:PutImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload

  #-----------------------------------------------------------------------------#
  # Role for CloudWatch service
  #-----------------------------------------------------------------------------#
  CloudWatchEventRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: cwe-pipeline-execution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: codepipeline:StartPipelineExecution
                Resource: !Sub arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${Pipeline}

Outputs:
  PipelineUrl:
    Value: !Sub https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${Pipeline}
