Parameters:
  GitHubRepo:
    Type: String
  GitHubBranch:
    Type: String
  GitHubToken:
    Type: String
    NoEcho: true
  GitHubUser:
    Type: String
  EnvironmentName:
    Type: String
    Default: production
  DeploymentType:
    Type: String
    Default: fargate
    AllowedValues: [ecs, fargate]

Resources:
  # # Create ECR respositories to hold built docker images
  # ServerRepository:
  #   Type: AWS::ECR::Repository
  #   DeletionPolicy: Retain
  #   UpdateReplacePolicy: Retain
  # CacheRepository:
  #   Type: AWS::ECR::Repository
  #   DeletionPolicy: Retain
  #   UpdateReplacePolicy: Retain
  # DatabaseRepository:
  #   Type: AWS::ECR::Repository
  #   DeletionPolicy: Retain
  #   UpdateReplacePolicy: Retain

  # Role used to give CodePipeline to release a build.
  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              # Allow codepipeline to put artifacts in the S3 bucket
              # as well as get artifacts back out of it.
              - Resource:
                  - !Sub arn:aws:s3:::${ArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
              # Allow codepipeline to build code builds
              - Resource: "*"
                Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - iam:PassRole
              # Allow codepipeline to deploy cloudformation stacks
              - Effect: Allow
                Action:
                  - cloudformation:CreateChangeSet
                  - cloudformation:CreateStack
                  - cloudformation:CreateUploadBucket
                  - cloudformation:DeleteStack
                  - cloudformation:Describe*
                  - cloudformation:List*
                  - cloudformation:UpdateStack
                  - cloudformation:ValidateTemplate
                  - cloudformation:ExecuteChangeSet
                Resource: "*"
              # Allow codepipeline use codestar connections
              - Effect: Allow
                Action:
                  - codestar-connections:GetConnection
                  - codestar-connections:UseConnection
                  - codestar-connections:ListConnections
                Resource: "*"

  # CloudFormation deployment role. This role is passed by CodeBuild to
  # CloudFormation to use when setting up the application resources
  CloudFormationDeployRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: deploy-stack
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "iam:*"
                  - "ec2:*"
                  - "ecs:*"
                  - "elasticloadbalancing:*"
                  - "autoscaling:*"
                  - "elasticache:*"
                  - "logs:*"
                  - "application-autoscaling:*"
                  - "cloudwatch:*"
                  - "route53:*"
                  - "rds:*"
                  - "mq:*"
                  # - "secretsmanager:*"
                  - "ssm:*"
                Resource: "*"

  # While the build is in progress we need a place to store artifacts
  ArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub microservices-infrastructure-${AWS::AccountId}

  CodeStarConnection:
    Type: AWS::CodeStarConnections::Connection
    Properties:
      ConnectionName: MyGitHubConnection
      ProviderType: GitHub

  # # A Webhook for the pipeline which is set for manual action only
  # PipelineWebhook: 
  #   Type: AWS::CodePipeline::Webhook
  #   Properties:
  #     AuthenticationConfiguration:
  #       SecretToken: !Ref GitHubToken
  #     Filters:
  #       - JsonPath: "$.ref"
  #         MatchEquals: refs/heads/{Branch}
  #     Authentication: GITHUB_HMAC
  #     TargetPipeline: !Ref Pipeline
  #     TargetAction: Source
  #     TargetPipelineVersion: !GetAtt Pipeline.Version
  #     RegisterWithThirdParty: false # only manual action

  # This pipeline defines the steps to build, deploy, and release the application
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket
      Stages:

        # First we have to pull the source code from the Github repository
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeStarSourceConnection
              Configuration:
                ConnectionArn: !Ref CodeStarConnection
                BranchName: !Ref GitHubBranch
                FullRepositoryId: !Sub ${GitHubUser}/${GitHubRepo}
                # PollForSourceChanges: false
              OutputArtifacts:
                - Name: Source
              RunOrder: 1
            # - Name: Source
            #   ActionTypeId:
            #     Category: Source
            #     Owner: ThirdParty
            #     Version: 1
            #     Provider: GitHub
            #   Configuration:
            #     Owner: !Ref GitHubUser
            #     Repo: !Ref GitHubRepo
            #     Branch: !Ref GitHubBranch
            #     OAuthToken: !Ref GitHubToken
            #     PollForSourceChanges: false
            #   OutputArtifacts:
            #     - Name: Source
            #   RunOrder: 1

        # Now we deploy the network resources: VPC, subnets, etc.
        - Name: Network
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              Configuration:
                ActionMode: CREATE_UPDATE
                RoleArn: !GetAtt CloudFormationDeployRole.Arn
                StackName: !Sub ${EnvironmentName}-Network
                TemplatePath: Source::deployments/network.yml
                Capabilities: CAPABILITY_IAM
                ParameterOverrides: !Sub |
                  {
                    "EnvironmentName": "${EnvironmentName}"
                  }
              InputArtifacts:
                - Name: Source
              OutputArtifacts:
                - Name: Network

        # # Deploy the base resources: databases, the load balancer,
        # # and the ECS/Fargate cluster
        # - Name: BaseResources
        #   Actions:
        #     # Deploy the resources: Rabbit, Redis, and Postgres
        #     - Name: DeployResources
        #       ActionTypeId:
        #         Category: Deploy
        #         Owner: AWS
        #         Version: 1
        #         Provider: CloudFormation
        #       Configuration:
        #         ActionMode: CREATE_UPDATE
        #         RoleArn: !GetAtt CloudFormationDeployRole.Arn
        #         StackName: !Sub ${EnvironmentName}-Resources
        #         TemplatePath: Source::deployments/resources.yml
        #         Capabilities: CAPABILITY_IAM
        #         ParameterOverrides: !Sub |
        #           {
        #             "EnvironmentName": "${EnvironmentName}"
        #           }
        #       InputArtifacts:
        #         - Name: Source
        #       OutputArtifacts:
        #         - Name: Resources

        #     # Deploy the application load balancer
        #     - Name: DeployLoadBalancer
        #       ActionTypeId:
        #         Category: Deploy
        #         Owner: AWS
        #         Version: 1
        #         Provider: CloudFormation
        #       Configuration:
        #         ActionMode: CREATE_UPDATE
        #         RoleArn: !GetAtt CloudFormationDeployRole.Arn
        #         StackName: !Sub ${EnvironmentName}-LoadBalancer
        #         TemplatePath: Source::deployments/alb.yml
        #         Capabilities: CAPABILITY_IAM
        #         ParameterOverrides: !Sub |
        #           {
        #             "EnvironmentName": "${EnvironmentName}"
        #           }
        #       InputArtifacts:
        #         - Name: Source
        #       OutputArtifacts:
        #         - Name: LoadBalancer

        #     # Deploy the ECS/Fargate cluster
        #     - Name: DeployCluster
        #       ActionTypeId:
        #         Category: Deploy
        #         Owner: AWS
        #         Version: 1
        #         Provider: CloudFormation
        #       Configuration:
        #         ActionMode: CREATE_UPDATE
        #         RoleArn: !GetAtt CloudFormationDeployRole.Arn
        #         StackName: !Sub ${EnvironmentName}-Cluster
        #         TemplatePath: !Sub Source::deployments/cluster-${DeploymentType}.yml
        #         Capabilities: CAPABILITY_IAM
        #         ParameterOverrides: !Sub |
        #           {
        #             "EnvironmentName": "${EnvironmentName}"
        #           }
        #       InputArtifacts:
        #         - Name: Source
        #       OutputArtifacts:
        #         - Name: Cluster

Outputs:
  PipelineUrl:
    Value: !Sub https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${Pipeline}